//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.6.1055.0.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IDaemonOperation", Namespace="http://tempuri.org/")]
public partial class MonoDaemonProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetRunningProcessesOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetProcessByNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback StartRemoteProcessOperationCompleted;
    
    /// <remarks/>
    public MonoDaemonProxy() {
        this.Url = "http://172.16.132.1:8888/monodaemon";
    }
    
    /// <remarks/>
    public event GetRunningProcessesCompletedEventHandler GetRunningProcessesCompleted;
    
    /// <remarks/>
    public event GetProcessByNameCompletedEventHandler GetProcessByNameCompleted;
    
    /// <remarks/>
    public event StartRemoteProcessCompletedEventHandler StartRemoteProcessCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDaemonOperation/GetRunningProcesses", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/MonoDaemon.Service")]
    public ProcessInformation[] GetRunningProcesses() {
        object[] results = this.Invoke("GetRunningProcesses", new object[0]);
        return ((ProcessInformation[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetRunningProcesses(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRunningProcesses", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public ProcessInformation[] EndGetRunningProcesses(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ProcessInformation[])(results[0]));
    }
    
    /// <remarks/>
    public void GetRunningProcessesAsync() {
        this.GetRunningProcessesAsync(null);
    }
    
    /// <remarks/>
    public void GetRunningProcessesAsync(object userState) {
        if ((this.GetRunningProcessesOperationCompleted == null)) {
            this.GetRunningProcessesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRunningProcessesOperationCompleted);
        }
        this.InvokeAsync("GetRunningProcesses", new object[0], this.GetRunningProcessesOperationCompleted, userState);
    }
    
    private void OnGetRunningProcessesOperationCompleted(object arg) {
        if ((this.GetRunningProcessesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRunningProcessesCompleted(this, new GetRunningProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDaemonOperation/GetProcessByName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public ProcessInformation GetProcessByName([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string processName) {
        object[] results = this.Invoke("GetProcessByName", new object[] {
                    processName});
        return ((ProcessInformation)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetProcessByName(string processName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProcessByName", new object[] {
                    processName}, callback, asyncState);
    }
    
    /// <remarks/>
    public ProcessInformation EndGetProcessByName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ProcessInformation)(results[0]));
    }
    
    /// <remarks/>
    public void GetProcessByNameAsync(string processName) {
        this.GetProcessByNameAsync(processName, null);
    }
    
    /// <remarks/>
    public void GetProcessByNameAsync(string processName, object userState) {
        if ((this.GetProcessByNameOperationCompleted == null)) {
            this.GetProcessByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessByNameOperationCompleted);
        }
        this.InvokeAsync("GetProcessByName", new object[] {
                    processName}, this.GetProcessByNameOperationCompleted, userState);
    }
    
    private void OnGetProcessByNameOperationCompleted(object arg) {
        if ((this.GetProcessByNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetProcessByNameCompleted(this, new GetProcessByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDaemonOperation/StartRemoteProcess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void StartRemoteProcess([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string processName) {
        this.Invoke("StartRemoteProcess", new object[] {
                    processName});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginStartRemoteProcess(string processName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StartRemoteProcess", new object[] {
                    processName}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndStartRemoteProcess(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void StartRemoteProcessAsync(string processName) {
        this.StartRemoteProcessAsync(processName, null);
    }
    
    /// <remarks/>
    public void StartRemoteProcessAsync(string processName, object userState) {
        if ((this.StartRemoteProcessOperationCompleted == null)) {
            this.StartRemoteProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartRemoteProcessOperationCompleted);
        }
        this.InvokeAsync("StartRemoteProcess", new object[] {
                    processName}, this.StartRemoteProcessOperationCompleted, userState);
    }
    
    private void OnStartRemoteProcessOperationCompleted(object arg) {
        if ((this.StartRemoteProcessCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.StartRemoteProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MonoDaemon.Service")]
public partial class ProcessInformation {
    
    private string imagePathField;
    
    private int pidField;
    
    private bool pidFieldSpecified;
    
    private string processNameField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public string ImagePath {
        get {
            return this.imagePathField;
        }
        set {
            this.imagePathField = value;
        }
    }
    
    /// <remarks/>
    public int Pid {
        get {
            return this.pidField;
        }
        set {
            this.pidField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool PidSpecified {
        get {
            return this.pidFieldSpecified;
        }
        set {
            this.pidFieldSpecified = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public string ProcessName {
        get {
            return this.processNameField;
        }
        set {
            this.processNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
public delegate void GetRunningProcessesCompletedEventHandler(object sender, GetRunningProcessesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetRunningProcessesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRunningProcessesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public ProcessInformation[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ProcessInformation[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
public delegate void GetProcessByNameCompletedEventHandler(object sender, GetProcessByNameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetProcessByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetProcessByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public ProcessInformation Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ProcessInformation)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
public delegate void StartRemoteProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
